// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProgettoIngegneriaSoftware.API;

#nullable disable

namespace ProgettoIngegneriaSoftware.API.EFCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.BookedSeatEntityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("EventEntityModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SeatEntityModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserEntityModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventEntityModelId");

                    b.HasIndex("SeatEntityModelId");

                    b.HasIndex("UserEntityModelId");

                    b.ToTable("BookedSeats");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.EventEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.PlaceEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid>("SeatsRowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeatsRowId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatsRowEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeatsZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeatsZoneId");

                    b.ToTable("SeatsRows");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatsZoneEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("SeatsZones");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.UserEntityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varbinary(128)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.BookedSeatEntityModel", b =>
                {
                    b.HasOne("ProgettoIngegneriaSoftware.API.Models.DB.EventEntityModel", null)
                        .WithMany("BookedSeats")
                        .HasForeignKey("EventEntityModelId");

                    b.HasOne("ProgettoIngegneriaSoftware.API.Models.DB.SeatEntityModel", null)
                        .WithMany("BookedSeats")
                        .HasForeignKey("SeatEntityModelId");

                    b.HasOne("ProgettoIngegneriaSoftware.API.Models.DB.UserEntityModel", null)
                        .WithMany("BookedSeats")
                        .HasForeignKey("UserEntityModelId");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.EventEntityModel", b =>
                {
                    b.HasOne("ProgettoIngegneriaSoftware.API.Models.DB.PlaceEntityModel", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatEntityModel", b =>
                {
                    b.HasOne("ProgettoIngegneriaSoftware.API.Models.DB.SeatsRowEntityModel", "Row")
                        .WithMany("Seats")
                        .HasForeignKey("SeatsRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Row");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatsRowEntityModel", b =>
                {
                    b.HasOne("ProgettoIngegneriaSoftware.API.Models.DB.SeatsZoneEntityModel", "SeatsZone")
                        .WithMany("SeatsRows")
                        .HasForeignKey("SeatsZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatsZone");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatsZoneEntityModel", b =>
                {
                    b.HasOne("ProgettoIngegneriaSoftware.API.Models.DB.PlaceEntityModel", "Place")
                        .WithMany("SeatsZones")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.EventEntityModel", b =>
                {
                    b.Navigation("BookedSeats");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.PlaceEntityModel", b =>
                {
                    b.Navigation("SeatsZones");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatEntityModel", b =>
                {
                    b.Navigation("BookedSeats");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatsRowEntityModel", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.SeatsZoneEntityModel", b =>
                {
                    b.Navigation("SeatsRows");
                });

            modelBuilder.Entity("ProgettoIngegneriaSoftware.API.Models.DB.UserEntityModel", b =>
                {
                    b.Navigation("BookedSeats");
                });
#pragma warning restore 612, 618
        }
    }
}
